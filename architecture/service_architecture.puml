@startuml
'https://plantuml.com/deployment-diagram

!include <logos/kafka>
!include <logos/elasticsearch>
!include <logos/nginx>
!include <logos/redis>
!include <logos/postgresql>
!include <logos/flask>
!include <logos/gunicorn>
!include <logos/jaeger>
!include <logos/django>
!include <logos/kibana>
!include <logos/python>
!include <logos/mongodb>
!include <logos/rabbitmq>
skinparam roundCorner 15
title Схема архитектуры сервиса уведомлений

actor/ Manager
node "Админ-панель" as admin_panel #palegreen;line:green;text:blue {
    component "<$nginx>" as nginx_notification_admin
    component "<$gunicorn>\nuWSGI web server" as gunicorn {
    component "<$django>\nnotification_admin" as django
    }
    database "<$redis>\nCache" as redis_admin

    nginx_notification_admin <--> gunicorn
    django <-> redis_admin
}
node "Сервис Notification API" as notification_api #palegreen;line:green;text:blue {
    component "<$nginx>" as nginx_notification
    component "<$gunicorn>\nuASGI web server" as uvicorn {
    component "<img:FastAPI.png>\nNotification-API" as notification_web_api
    }
    database "<$redis>\nCache" as redis_notification

    nginx_notification <--> uvicorn
    notification_web_api <-> redis_notification
}
node "Кластер базы данных уведомлений" as notification_db {
    database "<$mongodb>\nPrimary" as mongodb_notification_primary
    database "<$mongodb>\nSecondary" as mongodb_notification_secondary_1
    database "<$mongodb>\nSecondary" as mongodb_notification_secondary_2
    database "<$mongodb>\nSecondary hidden" as mongodb_notification_secondary_3

    mongodb_notification_primary <-down-> mongodb_notification_secondary_1
    mongodb_notification_primary <-down-> mongodb_notification_secondary_2
    mongodb_notification_primary <-down-> mongodb_notification_secondary_3
}
node "Генератор автоматических уведомлений" as scheduler {
    component "<$python>\nScheduler" as script_scheduler
    component "<img:cron.png>\nCron" as crontab
    database "<$redis>\nCache" as redis_scheduler

    crontab -> script_scheduler
    script_scheduler <-> redis_scheduler
}
node "Брокер отчетных событий" as queues_reporting_events #aliceblue;line:blue;text:blue {
    queue "<$rabbitmq>\nReporting events queues                      " as rabbitmq_reporting_events
}

node "Брокер уведомлений" as queue_events #palegreen;line:green;text:blue {
    queue "<$rabbitmq>\nHigh, Medium, Low Priority Message Queues" as rabbitmq_message_queues
}

node "Обработчики уведомлений (workers)" as workers {
component "Websocket workers" as websocket_workers {
    collections "<$python>\nWS worker 1...\nWS worker n" as ws_workers
    }
component "Email workers" as email_workers {
    collections "<$python>\nE-mail worker 1...\nE-mail worker n" as em_workers
    }
    database "<$redis>\nCache" as redis_workers
'    websocket_workers -- email_workers #white
    ws_workers <--> redis_workers
    em_workers <--> redis_workers
}
node "Внешние сервисы" as other_services {
    node "Сервис UGC" as ugc_service #aliceblue;line:blue;text:blue {
        note as note1
        Пользовательские события,
        требующие отправки уведомления
        (лайки|дизлайки рецензий и др.)
        end note
    }
    node "Сервис Auth API" as auth_service #aliceblue;line:blue;text:blue {
        note as note2
        Предоставление расширенной
        информации о пользователе
        (Имя, фамилия, адрес электронной
        почты, телефон и т.д.)
        end note

    }
    node "Сервис Async API" as async_service #aliceblue;line:blue;text:blue {
        note as note3
        Предоставление расширенной
        информации о фильмах
        (название, жанры, год выпуска и т.д.)
        end note
    }
    node "Админ-панель управления\nконтентом онлайн-кинотеатра" as movies_admin_service #aliceblue;line:blue;text:blue {
        note "Автоматические уведомления\n о добавлении новых фильмов,\n выходе новой серии и т.д." as N4
    }
    ugc_service -[hidden]- movies_admin_service
    movies_admin_service -[hidden]- auth_service
    auth_service -[hidden]- async_service
}
node "Кластер базы данных сервиса UGC" as ugc_db #aliceblue;line:blue;text:blue {
    database "<$mongodb>\nPrimary" as mongodb_ugc_primary
    database "<$mongodb>\nSecondary" as mongodb_ugc_secondary_1
    database "<$mongodb>\nSecondary" as mongodb_ugc_secondary_2

    mongodb_ugc_primary <--> mongodb_ugc_secondary_1
    mongodb_ugc_primary <--> mongodb_ugc_secondary_2
}
Manager <--> nginx_notification_admin

rabbitmq_reporting_events <- ugc_service #green;line.bold
rabbitmq_reporting_events <- movies_admin_service #green;line.bold

rabbitmq_reporting_events -up-> notification_web_api

@enduml